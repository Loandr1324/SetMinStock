# Author Loik Andrey 7034@balancedv.ru
# TODO
#  Часть 1
#  1. Создать отдельный файл программы для чтения файлов эксель. Передавать туда маску наименования файла, который требуется прочитать.
#  2. Прочитать все файлы по продажам и объединить
#  3. Прочитать все файлы МО и объединить.
#  4. Прочиттаь старый итоговый файл и взять от туда старые данные по продажам
#  5. Занести все данные в новый файл и найти отличия новых данных по продажам по всей компании со старыми и записать в отдельную колонку
#  6. Отформатировать все строки, выделить те строки в которых в колонке Отличие значение не равно нулю
#  Часть 2
#  7. Считать значения МО из эксель файл полученного после редактирования отвественным заказчиком итого вого файла из Части 1
#  8. Создать файл для загрузки значений МО, которые были считаны в п.7

import pandas as pd
import os

# import readfile

FOLDER = 'Установка МО ответственным'
salesName = 'продажи'
minStockName = 'МО'

def search_file(name):
    """
    :param name: Поиск всех файлов в папке FOLDER, в наименовании которых, содержится name
    :return: filelist список с наименованиями фалов
    """
    filelist = [] # объявляем переменную
    for item in os.listdir(FOLDER):  # для каждого файла в папке FOLDER
        if name in item and item.endswith('.xlsx'): # если файл с расширенитем .xlsx, то выполняем
            filelist.append(FOLDER + "/" + item) # добаляем в список папку и имя файла для последующего обращения из списка
        else:
            pass
    return filelist # возвращаем список файлов в место вызова функции


def read_xlsx(file_list):
    """
    :param file_list: Загружаем в DataFrame файлы из file_list
    :return: df_result Дата фрэйм с данными из файлов
    """

    df_result = None # объявляем перменную
    for filename in file_list: # проходим по каждому элементу списка файлов
        print(filename) # для тестов выводим в консоль наименование файла с которым проходит работа
        df = pd.read_excel(filename, sheet_name='TDSheet', header=0, usecols="A:I",
                           skipfooter=1, engine='openpyxl') # считываем файл эксель в DataFrame df
        df_search_header = df.iloc[:15, :1] # для ускорения работы выбираем из DataFrame первую колонку и 15 строк
        # создаём маску и отмечаем True строку где есть слово "Номенклатура", остальные False
        mask = df_search_header.replace('.*Номенклатура.*', True, regex=True).eq(True)
        # Преобразуем Dataframe согласно маски. После обработки все значения будут NaN кроме нужного нам.
        # В этой же строке кода удаляем все строки со значением NaN и далее получаем индекс оставшейся строки
        f = df_search_header[mask].dropna(axis=0, how='all').index.values # Удаление пустых колонок, если axis=0, то строк
        df.columns = df.iloc[int(f)] # Значения из найденной строки переносим в заголовки DataFrame для простоты дальнейшего обращения
        df = df.iloc[int(f) + 2:, :] # Убираем все строки с верха DF включая найденные заголовки
        df = df.dropna(axis=1, how='all')  # Убрали пустые колонки для крсоты
        df.set_index(['Номенклатура.Код', 'Номенклатура'], inplace=True) # переносим колонки в индекс, для упрощения дальнейшей работы
        print(df.iloc[:15, :2]) # Для тестов выводим в консоль 15 строк и два столбца полученного DF
        # Добавляем преобразованный DF в результирующий DF
        df_result = pd.concat([df_result, df], axis=1, ignore_index=False, levels=['Номенклатура.Код'])
    # Добавляем в результирующий DF колоку и подставляем в неё сумму всех колонок
    df_result['Итого по компании'] = df_result.sum(axis=1)
    df_result.to_excel('test.xlsx') # записываем полученные джанные в эксель.
    return


if __name__ == '__main__':
    salesFilelist = search_file(salesName) # запускаем функцию по поиску файлов и получаем список файлов
    minStockFilelist = search_file(minStockName) # запускаем функцию по поиску файлов и получаем список файлов
    # print ( salesFilelist )
    # print ( minStockFilelist )
    read_xlsx(salesFilelist)
